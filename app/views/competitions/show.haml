- if can? :manage, @competition
  %ul.menu
    %li
      = link_to 'Edit', edit_competition_path(@competition)
    %li
      = link_to 'Destroy', @competition, :confirm => 'Are you sure?', :method => :delete
.clearboth

%h1= @competition.name
%p.fs-larger
  != Status.where(table: 'competitions', value: (@competition.status or 0)).first.h_display
%div
  - if @competition.ttype.present?
    ! Format:
    != Status.where(table: 'comp-type', value: (@competition.ttype)).first.name.bold
  %br
  ! Director: #{(@competition.user.nick).bold}
  %br
  ! Competition is #{(@competition.formal ? 'formal' : 'informal').bold}
  %br
  ! Deadline: #{@competition.deadline.to_s.bold}
%p
%p
  Announce:
  = @competition.announce
- if @competition.results.present?
  %p
    Results:
    = @competition.results
  
- if may_edit? @competition
  = form_for @competition, url: {action: 'judge'}  do |f|
    - sections = @competition.sections.sort{|x|x.id}
    - if sections.count > 1
      .lab Send invitation to be a
      = select_tag :role, '<option>director</option><option>jugde</option>'.html_safe
      .lab for section
      = collection_select :competition, :section_ids, sections, |
        :id, :name                                                           |
    - else
      .lab Send invitation to judge this competition
      = collection_select :competition, :section_ids, sections, |
        :id, :name, {}, style: 'display:none'                                |
    .lab to email:
    = f.hidden_field :id
    = text_field_tag :judge_email, '', size: 26
    = f.submit 'Send invitation'
  
  - if @competition.sections.count > 1
    %p  
      = @competition.sections.count
      sections follow:
%hr
- @competition.sections.each do |section|
  %h2= section.name
  %p= section.theme
    
  %p
    Judges confirmed:
    %span.fs-larger= section.users.empty? ? 'none' : section.users.map(&:nick).commatize
    
  %h4 Marks given
  %table.judgestat
    %tr
      %th Judge
      %th Problems judged
      %th Total marks
    - section.marks.select('user_id, sum(nummark) As a, count(*) As b').group('user_id').each do |judge|
      %tr
        %td= judge.user.nick
        %td= judge.b
        %td= judge.a

